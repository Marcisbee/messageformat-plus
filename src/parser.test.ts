import { expect } from "jsr:@std/expect";
import { parseMessageFormat } from "./parser.ts";

type StructuralCase = [string, unknown[]];

const structuralCases: StructuralCase[] = [
  ["", []],
  ["test", ["test"]],
  ["Hello world!", ["Hello", " ", "world", "!"]],
  ["Hello }", ["Hello", " ", "}"]],
  ["Hello {", ["Hello", " ", "{"]],
  ["Hello {}", ["Hello", " ", "{", "}"]],
  ["Hello {input.first", ["Hello", " ", "{", "input", ".", "first"]],
  ["{}", ["{", "}"]],
  [
    "{test}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["test"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{test.nested}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["test", "nested"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{test.nested,pipe1}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["test", "nested"],
          toString: expect.any(Function),
        },
        transformer: { type: "transformer", name: "pipe1", args: [] },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{test.nested,pipe1,pipe2}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["test", "nested"],
          toString: expect.any(Function),
        },
        transformer: { type: "transformer", name: "pipe1", args: ["pipe2"] },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{ test.nested , pipe1 , pipe2 , pipe3 }",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["test", "nested"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "pipe1",
          args: ["pipe2", " ", ",", " ", "pipe3"],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  ["{test", ["{", "test"]],
  ["{test.nested", ["{", "test", ".", "nested"]],
  ["{test.nested, pipe1", ["{", "test", ".", "nested", ",", " ", "pipe1"]],
  [
    "{test.nested, pipe1, pipe2{}",
    [
      "{",
      "test",
      ".",
      "nested",
      ",",
      " ",
      "pipe1",
      ",",
      " ",
      "pipe2",
      "{",
      "}",
    ],
  ],
  [
    "Hello {input.first_name} {input.last_name}!",
    [
      "Hello",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "first_name"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "last_name"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      "!",
    ],
  ],
  [
    "Hello {} {input.first_name} {input.last_name}!",
    [
      "Hello",
      " ",
      "{",
      "}",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "first_name"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "last_name"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      "!",
    ],
  ],
  [
    "Hello { input.gender, select } {input.first_name} {input.last_name}!",
    [
      "Hello",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "gender"],
          toString: expect.any(Function),
        },
        transformer: { type: "transformer", name: "select", args: [] },
        toString: expect.any(Function),
      },
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "first_name"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "last_name"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      "!",
    ],
  ],
  [
    "Hello { input.gender, select, male{Mr}} {input.first_name} {input.last_name}!",
    [
      "Hello",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "gender"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "select",
          args: ["male", "{", ["Mr"], "}"],
        },
        toString: expect.any(Function),
      },
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "first_name"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "last_name"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      "!",
    ],
  ],
  [
    "Price: {quote.gross_premium, asCurrency, (amount|, 1.2-2, ',', ' ')(currencySymbol)}",
    [
      "Price",
      ":",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["quote", "gross_premium"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "asCurrency",
          args: [
            "(",
            [
              "amount",
              "|",
              ",",
              " ",
              "1",
              ".",
              "2",
              "-2",
              ",",
              " ",
              "'",
              [","],
              "'",
              ",",
              " ",
              "'",
              [" "],
              "'",
            ],
            ")",
            "(",
            ["currencySymbol"],
            ")",
          ],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "a { count, test, one {a} } b.",
    [
      "a",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["count"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "test",
          args: ["one", " ", "{", ["a"], "}"],
        },
        toString: expect.any(Function),
      },
      " ",
      "b",
      ".",
    ],
  ],
  [
    "a { count, test, one {} } b.",
    [
      "a",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["count"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "test",
          args: ["one", " ", "{", [], "}"],
        },
        toString: expect.any(Function),
      },
      " ",
      "b",
      ".",
    ],
  ],
  [
    "Such { thing }. { count, selectordinal, one {First} two {Second}" +
    "                  few {Third} other {#th} } word.",
    [
      "Such",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["thing"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      ".",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["count"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "selectordinal",
          args: [
            "one",
            " ",
            "{",
            ["First"],
            "}",
            " ",
            "two",
            " ",
            "{",
            ["Second"],
            "}",
            "                  ",
            "few",
            " ",
            "{",
            ["Third"],
            "}",
            " ",
            "other",
            " ",
            "{",
            ["#", "th"],
            "}",
          ],
        },
        toString: expect.any(Function),
      },
      " ",
      "word",
      ".",
    ],
  ],
  [
    "Handles escaped delimiters: \\{ \\} \\' \\\" \\` \\\\ (\\) [\\]",
    [
      "Handles",
      " ",
      "escaped",
      " ",
      "delimiters",
      ":",
      " ",
      "\\",
      "{",
      " ",
      "\\",
      "}",
      " ",
      "\\",
      "'",
      " ",
      "\\",
      '"',
      " ",
      "\\",
      "`",
      " ",
      "\\",
      "\\",
      " ",
      "(",
      "\\",
      ")",
      " ",
      "[",
      "\\",
      "]",
    ],
  ],
  [
    "{a, test, \\{}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["a"],
          toString: expect.any(Function),
        },
        transformer: { type: "transformer", name: "test", args: ["\\", "{"] },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{a, test, \\}}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["a"],
          toString: expect.any(Function),
        },
        transformer: { type: "transformer", name: "test", args: ["\\", "}"] },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{input.data.agents[context.repeater_index].name}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: [
            "input",
            "data",
            "agents",
            {
              type: "path",
              path: ["context", "repeater_index"],
              toString: expect.any(Function),
            },
            "name",
          ],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{a.b[c[d.e[f].g]].h}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: [
            "a",
            "b",
            {
              type: "path",
              path: [
                "c",
                {
                  type: "path",
                  path: [
                    "d",
                    "e",
                    {
                      type: "path",
                      path: ["f"],
                      toString: expect.any(Function),
                    },
                    "g",
                  ],
                  toString: expect.any(Function),
                },
              ],
              toString: expect.any(Function),
            },
            "h",
          ],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "Content string: {input.data.dob, date, YYYY-MM-DD}",
    [
      "Content",
      " ",
      "string",
      ":",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "data", "dob"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "date",
          args: ["YYYY-MM-DD"],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{ COUNT, plural, =0 {There are no results.} one {There is one result.} other {There are # results.} }",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["COUNT"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "plural",
          args: [
            "=",
            "0",
            " ",
            "{",
            ["There", " ", "are", " ", "no", " ", "results", "."],
            "}",
            " ",
            "one",
            " ",
            "{",
            ["There", " ", "is", " ", "one", " ", "result", "."],
            "}",
            " ",
            "other",
            " ",
            "{",
            ["There", " ", "are", " ", "#", " ", "results", "."],
            "}",
          ],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{ ADDS, plural, offset:1 =0 {No-one has added this} =1 {You added this} one {You and one other person added this} other {You and # others added this} }",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["ADDS"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "plural",
          args: [
            "offset",
            ":",
            "1",
            " ",
            "=",
            "0",
            " ",
            "{",
            ["No-one", " ", "has", " ", "added", " ", "this"],
            "}",
            " ",
            "=",
            "1",
            " ",
            "{",
            ["You", " ", "added", " ", "this"],
            "}",
            " ",
            "one",
            " ",
            "{",
            [
              "You",
              " ",
              "and",
              " ",
              "one",
              " ",
              "other",
              " ",
              "person",
              " ",
              "added",
              " ",
              "this",
            ],
            "}",
            " ",
            "other",
            " ",
            "{",
            [
              "You",
              " ",
              "and",
              " ",
              "#",
              " ",
              "others",
              " ",
              "added",
              " ",
              "this",
            ],
            "}",
          ],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{input.data.begunstigten_personen.9.titel, select, dr{Dr.} prof{Prof.} prof_dr{Prof. Dr.} mag{Mag.} dipl_ing{Dipl.-Ing.} dl{Dl} other{}}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "data", "begunstigten_personen", "9", "titel"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "select",
          args: [
            "dr",
            "{",
            ["Dr", "."],
            "}",
            " ",
            "prof",
            "{",
            ["Prof", "."],
            "}",
            " ",
            "prof_dr",
            "{",
            ["Prof", ".", " ", "Dr", "."],
            "}",
            " ",
            "mag",
            "{",
            ["Mag", "."],
            "}",
            " ",
            "dipl_ing",
            "{",
            ["Dipl", ".", "-Ing", "."],
            "}",
            " ",
            "dl",
            "{",
            ["Dl"],
            "}",
            " ",
            "other",
            "{",
            [],
            "}",
          ],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{T, date, ::hamszzzz}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["T"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "date",
          args: ["::", "hamszzzz"],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "It is now {T, time} on {T, date}",
    [
      "It",
      " ",
      "is",
      " ",
      "now",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["T"],
          toString: expect.any(Function),
        },
        transformer: { type: "transformer", name: "time", args: [] },
        toString: expect.any(Function),
      },
      " ",
      "on",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["T"],
          toString: expect.any(Function),
        },
        transformer: { type: "transformer", name: "date", args: [] },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{sys} became operational on {d0, date, short}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["sys"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      " ",
      "became",
      " ",
      "operational",
      " ",
      "on",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["d0"],
          toString: expect.any(Function),
        },
        transformer: { type: "transformer", name: "date", args: ["short"] },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "Nyt on {T, date}, klo {T, time}",
    [
      "Nyt",
      " ",
      "on",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["T"],
          toString: expect.any(Function),
        },
        transformer: { type: "transformer", name: "date", args: [] },
        toString: expect.any(Function),
      },
      ",",
      " ",
      "klo",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["T"],
          toString: expect.any(Function),
        },
        transformer: { type: "transformer", name: "time", args: [] },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{a, b, c{d} e{ {f} g{h} } i{j}}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["a"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "b",
          args: [
            "c",
            "{",
            ["d"],
            "}",
            " ",
            "e",
            "{",
            [" ", "{", ["f"], "}", " ", "g", "{", ["h"], "}"],
            "}",
            " ",
            "i",
            "{",
            ["j"],
            "}",
          ],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    `{ SEL1, select,
        other {
          { PLUR1, plural,
            one {1}
            other {
              { SEL2, select, other {Deep in the heart.} }
            }
          }
        }
      }`,
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["SEL1"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "select",
          args: [
            "other",
            " ",
            "{",
            [
              `
          `,
              "{",
              [
                " ",
                "PLUR1",
                ",",
                " ",
                "plural",
                ",",
                `
            `,
                "one",
                " ",
                "{",
                ["1"],
                "}",
                `
            `,
                "other",
                " ",
                "{",
                [
                  `
              `,
                  "{",
                  [
                    " ",
                    "SEL2",
                    ",",
                    " ",
                    "select",
                    ",",
                    " ",
                    "other",
                    " ",
                    "{",
                    ["Deep", " ", "in", " ", "the", " ", "heart", "."],
                    "}",
                  ],
                  "}",
                ],
                "}",
              ],
              "}",
            ],
            "}",
          ],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "Test total<br/>__{input.data.test_value}%__",
    [
      "Test",
      " ",
      "total",
      "<",
      "br",
      "/>",
      "__",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "data", "test_value"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      "%",
      "__",
    ],
  ],
  [
    "<strong>Test message</strong><br><br>This is a generic test message with variables {user.name} and {count, select, one {One} other {#}} End.",
    [
      "<",
      "strong",
      ">",
      "Test",
      " ",
      "message",
      "</",
      "strong",
      "><",
      "br",
      "><",
      "br",
      ">",
      "This",
      " ",
      "is",
      " ",
      "a",
      " ",
      "generic",
      " ",
      "test",
      " ",
      "message",
      " ",
      "with",
      " ",
      "variables",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["user", "name"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
      " ",
      "and",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["count"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "select",
          args: [
            "one",
            " ",
            "{",
            ["One"],
            "}",
            " ",
            "other",
            " ",
            "{",
            ["#"],
            "}",
          ],
        },
        toString: expect.any(Function),
      },
      " ",
      "End",
      ".",
    ],
  ],
  [
    "{input.data.entity.0.test_field, select, option1{Option 1} option2{Option 2} none{None} other{}}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: [
            "input",
            "data",
            "entity",
            "0",
            "test_field",
          ],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "select",
          args: [
            "option1",
            "{",
            ["Option", " ", "1"],
            "}",
            " ",
            "option2",
            "{",
            ["Option", " ", "2"],
            "}",
            " ",
            "none",
            "{",
            ["None"],
            "}",
            " ",
            "other",
            "{",
            [],
            "}",
          ],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "{quote.extra_data.flow, select, manual_underwriting{TOTAL_AMOUNT <b> {input.insured_sum, asCurrency, (amount, 1.0-1, '.', '.') (currencySymbol)} </b> \n\n NOTE: This is a generic test message.}other{TOTAL_AMOUNT <b> {input.insured_sum, asCurrency, (amount, 1.0-1, '.', '.') (currencySymbol)} </b> \n\n Annual premium: {quote.extra_data.net_top, asCurrency, (amount, 1.2-2, ',', '.') (currencySymbol)} }}",
    [
      {
        type: "variable",
        path: {
          type: "path",
          path: ["quote", "extra_data", "flow"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "select",
          args: [
            "manual_underwriting",
            "{",
            [
              "TOTAL_AMOUNT",
              " ",
              "<",
              "b",
              ">",
              " ",
              "{",
              [
                "input",
                ".",
                "insured_sum",
                ",",
                " ",
                "asCurrency",
                ",",
                " ",
                "(",
                [
                  "amount",
                  ",",
                  " ",
                  "1",
                  ".",
                  "0",
                  "-1",
                  ",",
                  " ",
                  "'",
                  ["."],
                  "'",
                  ",",
                  " ",
                  "'",
                  ["."],
                  "'",
                ],
                ")",
                " ",
                "(",
                ["currencySymbol"],
                ")",
              ],
              "}",
              " ",
              "</",
              "b",
              ">",
              " \n\n ",
              "NOTE",
              ":",
              " ",
              "This",
              " ",
              "is",
              " ",
              "a",
              " ",
              "generic",
              " ",
              "test",
              " ",
              "message",
              ".",
            ],
            "}",
            "other",
            "{",
            [
              "TOTAL_AMOUNT",
              " ",
              "<",
              "b",
              ">",
              " ",
              "{",
              [
                "input",
                ".",
                "insured_sum",
                ",",
                " ",
                "asCurrency",
                ",",
                " ",
                "(",
                [
                  "amount",
                  ",",
                  " ",
                  "1",
                  ".",
                  "0",
                  "-1",
                  ",",
                  " ",
                  "'",
                  ["."],
                  "'",
                  ",",
                  " ",
                  "'",
                  ["."],
                  "'",
                ],
                ")",
                " ",
                "(",
                ["currencySymbol"],
                ")",
              ],
              "}",
              " ",
              "</",
              "b",
              ">",
              " \n\n ",
              "Annual",
              " ",
              "premium",
              ":",
              " ",
              "{",
              [
                "quote",
                ".",
                "extra_data",
                ".",
                "net_top",
                ",",
                " ",
                "asCurrency",
                ",",
                " ",
                "(",
                [
                  "amount",
                  ",",
                  " ",
                  "1",
                  ".",
                  "2",
                  "-2",
                  ",",
                  " ",
                  "'",
                  [","],
                  "'",
                  ",",
                  " ",
                  "'",
                  ["."],
                  "'",
                ],
                ")",
                " ",
                "(",
                ["currencySymbol"],
                ")",
              ],
              "}",
            ],
            "}",
          ],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "<b>Generic testing information</b> \n\n By clicking the \"Send documents now\" or \"Save offer now\" button you confirm that the <a href='https://example.com/privacy' target='_blank'>generic privacy information</a> has been noted. {input.distributor, select, optionA{}other{(Please forward this information to the customer.)}}",
    [
      "<",
      "b",
      ">",
      "Generic",
      " ",
      "testing",
      " ",
      "information",
      "</",
      "b",
      ">",
      " \n\n ",
      "By",
      " ",
      "clicking",
      " ",
      "the",
      " ",
      '"',
      "Send",
      " ",
      "documents",
      " ",
      "now",
      '"',
      " ",
      "or",
      " ",
      '"',
      "Save",
      " ",
      "offer",
      " ",
      "now",
      '"',
      " ",
      "button",
      " ",
      "you",
      " ",
      "confirm",
      " ",
      "that",
      " ",
      "the",
      " ",
      "<",
      "a",
      " ",
      "href",
      "=",
      "'",
      "https",
      "://",
      "example",
      ".",
      "com",
      "/",
      "privacy",
      "'",
      " ",
      "target",
      "=",
      "'",
      "_blank",
      "'",
      ">",
      "generic",
      " ",
      "privacy",
      " ",
      "information",
      "</",
      "a",
      ">",
      " ",
      "has",
      " ",
      "been",
      " ",
      "noted",
      ".",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["input", "distributor"],
          toString: expect.any(Function),
        },
        transformer: {
          type: "transformer",
          name: "select",
          args: [
            "optionA",
            "{",
            [],
            "}",
            "other",
            "{",
            [
              "(",
              [
                "Please",
                " ",
                "forward",
                " ",
                "this",
                " ",
                "information",
                " ",
                "to",
                " ",
                "the",
                " ",
                "customer",
                ".",
              ],
              ")",
            ],
            "}",
          ],
        },
        toString: expect.any(Function),
      },
    ],
  ],
  [
    "Value: {a.b[0].c}",
    [
      "Value",
      ":",
      " ",
      {
        type: "variable",
        path: {
          type: "path",
          path: ["a", "b", "0", "c"],
          toString: expect.any(Function),
        },
        transformer: undefined,
        toString: expect.any(Function),
      },
    ],
  ],
];

/**
 * Structural parse tests (object graph comparison with wildcard for toString functions)
 */
Deno.test("parseMessageFormat structural cases", async (t) => {
  for (const [input, content] of structuralCases) {
    await t.step(`parses ${JSON.stringify(input)}`, () => {
      const result = parseMessageFormat(input);

      expect(result && typeof result === "object").toBeTruthy();
      expect(result.type).toEqual("message");
      expect(result).toEqual({
        type: "message",
        content,
        toString: expect.any(Function),
      });
    });
  }
});

type StringCase = [string, string];
const stringCases: StringCase[] = [
  ["", ""],
  ["test", '"test"'],
  ["Hello world!", '"Hello world!"'],
  ["Hello }", '"Hello }"'],
  ["Hello {", '"Hello {"'],
  ["Hello {}", '"Hello {}"'],
  ["Hello {input.first", '"Hello {input.first"'],
  ["{}", '"{}"'],
  ["{test}", 'this.d(this.p(v,["test"]),this.l)'],
  ["{test.nested}", 'this.d(this.p(v,["test","nested"]),this.l)'],
  [
    "{test.nested,pipe1}",
    'this.d(this.p(v,["test","nested"]),this.l,"pipe1")',
  ],
  [
    "{test.nested,pipe1,arg1}",
    'this.d(this.p(v,["test","nested"]),this.l,"pipe1",["arg1"])',
  ],
  [
    "{a, b, c{d} e{ {f} g{h} } i{j}}",
    'this.d(this.p(v,["a"]),this.l,"b",["c","{",["d"],"}"," ","e","{",[" ","{",["f"],"}"," ","g","{",["h"],"}"],"}"," ","i","{",["j"],"}"])',
  ],
  [
    "Hello {input.first_name} {input.last_name}!",
    '"Hello "+this.d(this.p(v,["input","first_name"]),this.l)+" "+this.d(this.p(v,["input","last_name"]),this.l)+"!"',
  ],
  [
    "{input.data.agents[context.repeater_index].name}",
    'this.d(this.p(v,["input","data","agents",this.p(v,["context","repeater_index"]),"name"]),this.l)',
  ],
  [
    "{a.b[c[d.e[f].g]].h}",
    'this.d(this.p(v,["a","b",this.p(v,["c",this.p(v,["d","e",this.p(v,["f"]),"g"])]),"h"]),this.l)',
  ],
];

/**
 * Stringification tests (String(result) equivalence)
 */
Deno.test("parseMessageFormat string cases", async (t) => {
  for (const [input, expected] of stringCases) {
    await t.step(`parses ${JSON.stringify(input)}`, () => {
      const result = parseMessageFormat(input);
      expect(String(result)).toEqual(expected);
    });
  }
});
